package main

import (
	"bufio"
	"fmt"
	"io"
	"log"
	"os"
	"os/signal"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"syscall"
	"time"

	"github.com/bwmarrin/discordgo"
	"github.com/fatih/color"
	"gopkg.in/ini.v1"
)

// –ö–æ–ª—ñ—Ä –ø–æ–º–∏–ª–æ–∫ commands - —á–µ—Ä–≤–æ–Ω–∏–π

func main() {
	const Token = "MTE2MDE3NTg5NTQ3NTEzODYxMQ.GLxSos.THu0Vl5ZGXPRQN3MrOIMP9fgZqumGvQyRY3ORs"
	userChannels := make(map[string]string)
	userTimeJoin := make(map[string]string)
	userTimeJoinVoice := make(map[string]string)
	sess, err := discordgo.New("Bot " + Token) // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—Å—ñ—ó –∑ –±–æ—Ç–æ–º
	if err != nil {
		log.Fatal(err)
	}
	registerCommands(sess)
	sess.AddHandler(func(s *discordgo.Session, g *discordgo.GuildCreate) {
		basePath := "./servers"
		folderName := g.Guild.ID
		folderPath := filepath.Join(basePath, folderName)
		_, err := os.Stat(folderPath)
		if os.IsNotExist(err) {
			registerServer(s, g)
			red := color.New(color.FgRed)
			boldRed := red.Add(color.Bold)
			whiteBackground := boldRed.Add(color.BgCyan)
			whiteBackground.Printf("üéâ –£—Ä–∞–∞–∞. %v –¥–æ–±–∞–≤–∏–ª–∏ –±–æ—Ç–∞ –Ω–∞ —Å–≤—ñ–π —Å–µ—Ä–≤–µ—Ä! üéâ\n", g.Guild.Name)
		}
	})
	sess.AddHandler(func(s *discordgo.Session, m *discordgo.MessageCreate) { // –ú–æ–¥—É–ª—å –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –∞ —Ç–∞–∫–æ–∂ –∑–∞–ø–∏—Å —ó—Ö —É log
		if m.Author.Bot {
			return
		}
		cfg, err := ini.Load("servers/" + m.GuildID + "/config.ini")
		if err != nil {
			errorMsg := fmt.Sprintf("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É: %v", err)
			writer := color.New(color.FgBlue, color.Bold).SprintFunc()
			fmt.Println(writer(errorMsg))
			return
		}
		section := cfg.Section("LOGS")
		ChannelLogsMessages := section.Key("CHANNEL_LOGS_MESSAGE_ID").String()
		ChannelLogsVoice := section.Key("CHANNEL_LOGS_VOICE_ID").String()
		ChannelLogsServer := section.Key("CHANNEL_LOGS_SERVER_ID").String()
		if m.ChannelID == ChannelLogsMessages || m.ChannelID == ChannelLogsVoice || m.ChannelID == ChannelLogsServer {
			return
		} else {
			filePath := filepath.Join("servers", m.GuildID, "message.log")
			file, err := os.OpenFile(filePath, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
			if err != nil {
				log.Fatal(err)
			}
			defer file.Close()
			logger := log.New(file, "", log.LstdFlags)
			logger.Println("Text message: " + m.Content + " | " + "Nickname: " + m.Author.Username + " | " + "ID: " + m.Author.ID + " | " + "messageID: " + m.Message.ID + " | " + "ChannelID: " + m.ChannelID)
		}
	})
	sess.AddHandler(func(s *discordgo.Session, m *discordgo.MessageReactionAdd) { // –ú–æ–¥—É–ª—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ–ª—ñ –ø–æ —Ä–µ–∞–∫—Ü—ñ—ó –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		cfg, err := ini.Load("servers/" + m.GuildID + "/config.ini")
		if err != nil {
			errorMsg := fmt.Sprintf("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É: %v", err)
			writer := color.New(color.FgBlue, color.Bold).SprintFunc()
			fmt.Println(writer(errorMsg))
			return
		}
		section := cfg.Section("EMOJI_REACTIONS")
		MessageReactionAddID := section.Key("MESSAGE_REACTION_ID").String()
		EmojiReaction := section.Key("EMOJI_REACTION").String()
		addroleID := section.Key("ROLE_ADD_ID").String()
		switch {
		case len(MessageReactionAddID) != 19:
			return
		case len(addroleID) != 19:
			return
		}
		if m.MessageID == MessageReactionAddID {
			// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ä–µ–∞–∫—Ü—ñ—è (emoji)
			if m.Emoji.Name == EmojiReaction {
				// –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π –Ω–∞—Ç–∏—Å–Ω—É–≤ —Ä–µ–∞–∫—Ü—ñ—é
				userID := m.UserID
				member, err := s.GuildMember(m.GuildID, userID)
				if err != nil {
					fmt.Println("error getting member:", err)
					return
				}

				// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –ø–µ–≤–Ω—É —Ä–æ–ª—å
				hasRole := false
				for _, role := range member.Roles {
					if role == addroleID {
						hasRole = true
						break
					}
				}
				if hasRole {
					// –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –ø–µ–≤–Ω—É —Ä–æ–ª—å, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –π–æ–º—É –ø—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
					guild, err := sess.Guild(m.GuildID)
					if err != nil {
						fmt.Println("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä:", err)
						return
					}
					currentTime := time.Now()
					stringTime := currentTime.Format("2006-01-02T15:04:05.999Z07:00")
					channel, err := s.UserChannelCreate(userID)
					if err != nil {
						fmt.Println("error creating channel:", err)
						return
					}
					// –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
					embed := &discordgo.MessageEmbed{
						Title: "–ü–æ–º–∏–ª–∫–∞",
						Description: fmt.Sprintf(
							">>> –í–∞–º –≤–∂–µ –≤–∏–¥–∞–Ω–∞ —Ä–æ–ª—å! –Ø–∫—â–æ —Ä–æ–ª—ñ –Ω–µ–º–∞—î - –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó —Å–µ—Ä–≤–µ—Ä—É: "+"`%s`",
							guild.Name,
						),
						Thumbnail: &discordgo.MessageEmbedThumbnail{
							URL: "https://i.imgur.com/BKYSMoP.png",
						},
						Color:     0xf5b507, // –ö–æ–ª—ñ—Ä (—É —Ñ–æ—Ä–º–∞—Ç—ñ HEX)
						Timestamp: stringTime,
					}
					_, err = s.ChannelMessageSendEmbed(channel.ID, embed)
					if err != nil {
						fmt.Println("error sending message:", err)
						return
					}
				} else {
					err = s.GuildMemberRoleAdd(m.GuildID, userID, addroleID)
					if err != nil {
						fmt.Println("error adding role,", err)
						return
					}
					basePath := "./servers"
					folderName := m.GuildID
					directoryPath := filepath.Join(basePath, folderName)
					filePath := filepath.Join(directoryPath, "config.ini")
					section = cfg.Section("LVL_EXP_USERS")
					section.Key(m.UserID).SetValue("0")
					err = cfg.SaveTo(filePath)
					if err != nil {
						fmt.Println("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —É —Ñ–∞–π–ª:", err)
						return
					}
				}
			}
		}

	})
	sess.AddHandler(func(s *discordgo.Session, m *discordgo.MessageUpdate) { // –ú–æ–¥—É–ª—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞ —Ç–∞–∫–æ–∂ –∑–∞–ø–∏—Å —É log
		if m.Author == nil || m.Author.Bot {
			return
		}
		cfg, err := ini.Load("servers/" + m.GuildID + "/config.ini")
		if err != nil {
			errorMsg := fmt.Sprintf("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É: %v", err)
			writer := color.New(color.FgBlue, color.Bold).SprintFunc()
			fmt.Println(writer(errorMsg))
			return
		}
		section := cfg.Section("LOGS")
		ChannelLogsMessages := section.Key("CHANNEL_LOGS_MESSAGE_ID").String()
		ChannelLogsVoice := section.Key("CHANNEL_LOGS_VOICE_ID").String()
		ChannelLogsServer := section.Key("CHANNEL_LOGS_SERVER_ID").String()
		switch {
		case len(ChannelLogsMessages) != 19:
			return
		case len(ChannelLogsVoice) != 19:
			return
		case len(ChannelLogsServer) != 19:
			return
		}
		if m.ChannelID == ChannelLogsMessages || m.ChannelID == ChannelLogsServer || m.ChannelID == ChannelLogsVoice {
			return
		}
		currentTime := time.Now()
		stringTime := currentTime.Format("2006-01-02T15:04:05.999Z07:00")
		MessageUpdateID := m.Message.ID
		UserMessage := ""
		file, err := os.OpenFile("servers/"+m.GuildID+"/message.log", os.O_RDWR, 0644)
		if err != nil {
			fmt.Println("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É:", err)
			return
		}
		defer file.Close()

		scanner := bufio.NewScanner(file)

		for scanner.Scan() {
			line := scanner.Text()
			if strings.Contains(line, MessageUpdateID) {
				re := regexp.MustCompile(`Text message: ([^|]+)`)
				match := re.FindStringSubmatch(line)
				if len(match) > 1 {
					UserMessage = match[1]
					_, err := file.Seek(int64(-len(line)), io.SeekCurrent)
					if err != nil {
						fmt.Println("error seeking:", err)
						return
					}
					filePath := filepath.Join("servers", m.GuildID, "message.log")
					file, err := os.OpenFile(filePath, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
					if err != nil {
						log.Fatal(err)
					}
					defer file.Close()
					logger := log.New(file, "", log.LstdFlags)
					logger.Println("Text message: " + m.Content + " | " + "Nickname: " + m.Author.Username + " | " + "ID: " + m.Author.ID + " | " + "messageID: " + m.Message.ID + " | " + "ChannelID: " + m.ChannelID)
					break
				}
			}
		}

		if err := scanner.Err(); err != nil {
			fmt.Println("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É:", err)
			return
		}
		embed := &discordgo.MessageEmbed{
			Title: "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ",
			Fields: []*discordgo.MessageEmbedField{
				{
					Name:   "**–ö–∞–Ω–∞–ª**",
					Value:  "<#" + m.ChannelID + ">",
					Inline: true,
				},
				{
					Name:   "**–ê–≤—Ç–æ—Ä**",
					Value:  "<@" + m.Author.ID + ">",
					Inline: true,
				},
			},
			Description: fmt.Sprintf(
				">>> **–ë—É–ª–æ: **"+"_%s_"+"\n"+"**–°—Ç–∞–ª–æ: **"+"_%s_",
				UserMessage,
				m.Content,
			),
			Thumbnail: &discordgo.MessageEmbedThumbnail{
				URL: "https://i.imgur.com/g4OsjhU.png",
			},
			Color:     0xeda15f, // –ö–æ–ª—ñ—Ä (—É —Ñ–æ—Ä–º–∞—Ç—ñ HEX)
			Timestamp: stringTime,
		}
		_, err = s.ChannelMessageSendEmbed(ChannelLogsMessages, embed)
		if err != nil {
			fmt.Println("error getting member:", err)
			return
		}
		file.Close()

	})
	sess.AddHandler(func(s *discordgo.Session, m *discordgo.MessageDelete) { // –ú–æ–¥—É–ª—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		cfg, err := ini.Load("servers/" + m.GuildID + "/config.ini")
		if err != nil {
			errorMsg := fmt.Sprintf("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É: %v", err)
			writer := color.New(color.FgBlue, color.Bold).SprintFunc()
			fmt.Println(writer(errorMsg))
			return
		}
		section := cfg.Section("LOGS")
		ChannelLogsMessages := section.Key("CHANNEL_LOGS_MESSAGE_ID").String()
		ChannelLogsVoice := section.Key("CHANNEL_LOGS_VOICE_ID").String()
		ChannelLogsServer := section.Key("CHANNEL_LOGS_SERVER_ID").String()
		switch {
		case len(ChannelLogsMessages) != 19:
			return
		case len(ChannelLogsVoice) != 19:
			return
		case len(ChannelLogsServer) != 19:
			return
		}
		if m.ChannelID == ChannelLogsMessages || m.ChannelID == ChannelLogsServer || m.ChannelID == ChannelLogsVoice {
			return
		}
		currentTime := time.Now()
		stringTime := currentTime.Format("2006-01-02T15:04:05.999Z07:00")
		deletedID := m.Message.ID
		UserID := ""
		UserMessage := ""
		ChannelID := ""
		file, err := os.Open("servers/" + m.GuildID + "/message.log")
		if err != nil {
			fmt.Println("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É:", err)
			return
		}
		defer file.Close()

		scanner := bufio.NewScanner(file)
		for scanner.Scan() {
			line := scanner.Text()
			if strings.Contains(line, deletedID) {
				re := regexp.MustCompile(`ID: ([^\s]+)`)
				match := re.FindStringSubmatch(line)
				if len(match) > 1 {
					UserID = match[1]
				}
				re = regexp.MustCompile(`ChannelID: ([^\s]+)`)
				match = re.FindStringSubmatch(line)
				if len(match) > 1 {
					ChannelID = match[1]
				}
				re = regexp.MustCompile(`Text message: ([^|]+)`)
				match = re.FindStringSubmatch(line)
				if len(match) > 1 {
					UserMessage = match[1]
				}
			}
		}
		if err := scanner.Err(); err != nil {
			fmt.Println("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É:", err)
			return
		}
		embed := &discordgo.MessageEmbed{
			Title: "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ!",
			Fields: []*discordgo.MessageEmbedField{
				{
					Name:   "**–ö–∞–Ω–∞–ª**",
					Value:  "<#" + ChannelID + ">",
					Inline: true,
				},
				{
					Name:   "**–ê–≤—Ç–æ—Ä**",
					Value:  "<@" + UserID + ">",
					Inline: true,
				},
			},
			Description: fmt.Sprintf(
				">>> **–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: **\n"+"*%s*",
				UserMessage,
			),
			Thumbnail: &discordgo.MessageEmbedThumbnail{
				URL: "https://i.imgur.com/70d2SGt.png",
			},
			Color:     0xed5f5f, // –ö–æ–ª—ñ—Ä (—É —Ñ–æ—Ä–º–∞—Ç—ñ HEX)
			Timestamp: stringTime,
		}
		_, err = s.ChannelMessageSendEmbed(ChannelLogsMessages, embed)
		if err != nil {
			fmt.Println("error getting member:", err)
			return
		}
		file.Close()
	})
	sess.AddHandler(func(s *discordgo.Session, vs *discordgo.VoiceStateUpdate) { // –ú–æ–¥—É–ª—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Ö–æ–¥—É/–ø–µ—Ä–µ—Ö–æ–¥—É/–≤–∏—Ö–æ–¥—É –≤ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö
		if userChannels[vs.UserID] == vs.ChannelID {
			return
		}
		cfg, err := ini.Load("servers/" + vs.GuildID + "/config.ini")
		if err != nil {
			errorMsg := fmt.Sprintf("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É: %v", err)
			writer := color.New(color.FgBlue, color.Bold).SprintFunc()
			fmt.Println(writer(errorMsg))
			return
		}
		section := cfg.Section("LOGS")
		ChannelLogsVoice := section.Key("CHANNEL_LOGS_VOICE_ID").String()
		if len(ChannelLogsVoice) != 19 {
			return
		}
		currentTime := time.Now()
		stringTime := currentTime.Format("2006-01-02T15:04:05.999Z07:00")

		if vs.VoiceState.ChannelID != "" {
			if userChannels[vs.UserID] == vs.ChannelID {
				return
			}
			if len(userChannels[vs.UserID]) > 10 {
				if vs.ChannelID != userChannels[vs.UserID] {
					embed_run := &discordgo.MessageEmbed{
						Title: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–µ—Ä–µ–π—à–æ–≤ –≤ —ñ–Ω—à–∏–π –≥–æ–ª–æ—Å–æ–≤–∏–π –∫–∞–Ω–∞–ª",
						Fields: []*discordgo.MessageEmbedField{
							{
								Name:   "**–°—Ç–∞—Ä–∏–π –∫–∞–Ω–∞–ª**",
								Value:  "<#" + userChannels[vs.UserID] + ">",
								Inline: true,
							},
							{
								Name:   "**–ù–æ–≤–∏–π –∫–∞–Ω–∞–ª**",
								Value:  "<#" + vs.ChannelID + ">",
								Inline: true,
							},
						},
						Description: fmt.Sprintf(
							">>> **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: **"+"<@%s>"+"\n"+"**–ê–π–¥—ñ: **"+"`%s`",
							vs.UserID,
							vs.UserID,
						),
						Thumbnail: &discordgo.MessageEmbedThumbnail{
							URL: "https://i.imgur.com/ARqm68x.png",
						},
						Color:     0xc9c9c9, // –ö–æ–ª—ñ—Ä (—É —Ñ–æ—Ä–º–∞—Ç—ñ HEX)
						Timestamp: stringTime,
						Footer: &discordgo.MessageEmbedFooter{
							Text:    vs.Member.User.Username,
							IconURL: vs.Member.AvatarURL("256"), // URL –¥–ª—è —ñ–∫–æ–Ω–∫–∏ (–º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º —Ä—è–¥–∫–æ–º)
						},
					}
					_, err = s.ChannelMessageSendEmbed(ChannelLogsVoice, embed_run)
					if err != nil {
						fmt.Println("error getting member:", err)
						return
					}
					userChannels[vs.UserID] = vs.ChannelID
					return
				}
			}
			embed_join := &discordgo.MessageEmbed{
				Title: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–π—à–æ–≤ –≤ –≥–æ–ª–æ—Å–æ–≤–∏–π –∫–∞–Ω–∞–ª",
				Fields: []*discordgo.MessageEmbedField{
					{
						Name:   "**–ö–∞–Ω–∞–ª**",
						Value:  "<#" + vs.ChannelID + ">",
						Inline: true,
					},
					{
						Name:   "**–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á**",
						Value:  "<@" + vs.UserID + ">",
						Inline: true,
					},
				},
				Thumbnail: &discordgo.MessageEmbedThumbnail{
					URL: "https://i.imgur.com/HfR2ekf.png",
				},
				Color:     0x5fed80, // –ö–æ–ª—ñ—Ä (—É —Ñ–æ—Ä–º–∞—Ç—ñ HEX)
				Timestamp: stringTime,
				Footer: &discordgo.MessageEmbedFooter{
					Text:    vs.Member.User.Username,
					IconURL: vs.Member.AvatarURL("256"), // URL –¥–ª—è —ñ–∫–æ–Ω–∫–∏ (–º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º —Ä—è–¥–∫–æ–º)
				},
			}
			_, err = s.ChannelMessageSendEmbed(ChannelLogsVoice, embed_join)
			if err != nil {
				fmt.Println("error getting member:", err)
				return
			}
			JoinTime := time.Now()
			userTimeJoinVoice[vs.UserID] = strconv.FormatInt(JoinTime.Unix(), 10)
			userChannels[vs.UserID] = vs.ChannelID
		} else {
			channelID := userChannels[vs.UserID]
			embed_leave := &discordgo.MessageEmbed{
				Title: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–π—à–æ–≤ –∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É",
				Fields: []*discordgo.MessageEmbedField{
					{
						Name:   "**–ö–∞–Ω–∞–ª**",
						Value:  "<#" + channelID + ">",
						Inline: true,
					},
					{
						Name:   "**–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á**",
						Value:  "<@" + vs.UserID + ">",
						Inline: true,
					},
				},
				Thumbnail: &discordgo.MessageEmbedThumbnail{
					URL: "https://i.imgur.com/K6wF5SK.png",
				},
				Color:     0xed5f5f, // –ö–æ–ª—ñ—Ä (—É —Ñ–æ—Ä–º–∞—Ç—ñ HEX)
				Timestamp: stringTime,
				Footer: &discordgo.MessageEmbedFooter{
					Text:    vs.Member.User.Username,
					IconURL: vs.Member.AvatarURL("256"), // URL –¥–ª—è —ñ–∫–æ–Ω–∫–∏ (–º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º —Ä—è–¥–∫–æ–º)
				},
			}
			_, err = s.ChannelMessageSendEmbed(ChannelLogsVoice, embed_leave)
			if err != nil {
				fmt.Println("error getting member:", err)
				return
			}
			LeaveTime := time.Now()
			JoinTime := userTimeJoinVoice[vs.UserID]
			// –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è JoinTime –≤ int64 (Unix-—á–∞—Å)
			JoinTimeUnix, err := strconv.ParseInt(JoinTime, 10, 64)
			if err != nil {
				// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–≤–¥–∞–ª–æ—Å—è
				fmt.Println("–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó JoinTime –≤ int64:", err)
				return
			}
			// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ü—ñ –≤ —á–∞—Å—ñ –º—ñ–∂ LeaveTime —Ç–∞ JoinTime
			currentTime := (LeaveTime.Unix() - JoinTimeUnix) / 60
			var EXP uint32
			section = cfg.Section("LVL_EXP_USERS")
			valueStr := section.Key(vs.UserID).String()
			parsedEXP, err := strconv.ParseUint(valueStr, 10, 32)
			if err != nil {
				fmt.Println("–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∑–Ω–∞—á–µ–Ω–Ω—è —Ä—è–¥–∫–∞ –≤ uint32:", err)
				// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
				return
			}
			EXP = uint32(parsedEXP)
			EXP += uint32(currentTime)
			EXPStr := strconv.Itoa(int(EXP))
			section.Key(vs.UserID).SetValue(EXPStr)
			basePath := "./servers"
			folderName := vs.GuildID
			directoryPath := filepath.Join(basePath, folderName)
			filePath := filepath.Join(directoryPath, "config.ini")
			err = cfg.SaveTo(filePath)
			if err != nil {
				fmt.Println("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —É —Ñ–∞–π–ª:", err)
				return
			}
			delete(userTimeJoinVoice, vs.UserID)
			delete(userChannels, vs.UserID)
		}
	})
	sess.AddHandler(func(s *discordgo.Session, gma *discordgo.GuildMemberAdd) { // –ú–æ–¥—É–ª—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
		cfg, err := ini.Load("servers/" + gma.GuildID + "/config.ini")
		if err != nil {
			errorMsg := fmt.Sprintf("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É: %v", err)
			writer := color.New(color.FgBlue, color.Bold).SprintFunc()
			fmt.Println(writer(errorMsg))
			return
		}
		section := cfg.Section("LOGS")
		ChannelLogsServer := section.Key("CHANNEL_LOGS_SERVER_ID").String()
		if len(ChannelLogsServer) != 19 {
			return
		}

		currentTime := time.Now()
		userTimeJoin[gma.User.ID] = strconv.FormatInt(currentTime.Unix(), 10)

		stringTime := currentTime.Format("2006-01-02T15:04:05.999Z07:00")
		creationTime, err := discordgo.SnowflakeTimestamp(gma.User.ID)
		if err != nil {
			fmt.Println("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É:", err)
			return
		}
		embed_join := &discordgo.MessageEmbed{
			Title: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è",
			Description: fmt.Sprintf(
				">>> **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: **<@%s>\n**–ê–π–¥—ñ: **"+"`%s`"+"\n**–°—Ç–≤–æ—Ä–µ–Ω–∏–π: **"+"<t:"+"%d"+":R>",
				gma.User.ID,
				gma.User.ID,
				int(creationTime.Unix()),
			),
			Color:     0x1b7ab5, // –ö–æ–ª—ñ—Ä (—É —Ñ–æ—Ä–º–∞—Ç—ñ HEX)
			Timestamp: stringTime,
			Thumbnail: &discordgo.MessageEmbedThumbnail{
				URL: "https://i.imgur.com/jxNB6yn.png",
			},
			Footer: &discordgo.MessageEmbedFooter{
				Text:    gma.Member.User.Username,
				IconURL: gma.Member.AvatarURL("256"), // URL –¥–ª—è —ñ–∫–æ–Ω–∫–∏ (–º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º —Ä—è–¥–∫–æ–º)
			},
		}
		_, err = s.ChannelMessageSendEmbed(ChannelLogsServer, embed_join)
		if err != nil {
			fmt.Println("error getting member:", err)
			return
		}
	})
	sess.AddHandler(func(s *discordgo.Session, gmr *discordgo.GuildMemberRemove) { // –ú–æ–¥—É–ª—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏—Ö–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Å–µ—Ä–≤–µ—Ä—É
		cfg, err := ini.Load("servers/" + gmr.GuildID + "/config.ini")
		if err != nil {
			errorMsg := fmt.Sprintf("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É: %v", err)
			writer := color.New(color.FgBlue, color.Bold).SprintFunc()
			fmt.Println(writer(errorMsg))
			return
		}
		section := cfg.Section("LOGS")
		ChannelLogsServer := section.Key("CHANNEL_LOGS_SERVER_ID").String()
		if len(ChannelLogsServer) != 19 {
			return
		}
		currentTime := time.Now()
		stringTime := currentTime.Format("2006-01-02T15:04:05.999Z07:00")
		userTime, err := strconv.ParseInt(userTimeJoin[gmr.User.ID], 10, 64)
		if err != nil {
			fmt.Println("–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —Å—Ç—Ä–æ–∫–∏ –≤ int64:", err)
			return
		}
		stringTemp := "<t:" + strconv.FormatInt(userTime, 10) + ":R>"

		if err != nil {
			fmt.Println("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É:", err)
			return
		}
		embed_join := &discordgo.MessageEmbed{
			Title: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–∫–∏–Ω—É–≤ —Å–µ—Ä–≤–µ—Ä",
			Description: fmt.Sprintf(
				">>> **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: **<@%s>\n**–ê–π–¥—ñ: **"+"`%s`"+"\n"+"**–ü—Ä–∏—î–¥–Ω–∞–≤—Å—è: **"+"%s",
				gmr.User.ID,
				gmr.User.ID,
				stringTemp,
			),
			Color:     0xe3ad62, // –ö–æ–ª—ñ—Ä (—É —Ñ–æ—Ä–º–∞—Ç—ñ HEX)
			Timestamp: stringTime,
			Thumbnail: &discordgo.MessageEmbedThumbnail{
				URL: "https://i.imgur.com/iwsJcJn.png",
			},
			Footer: &discordgo.MessageEmbedFooter{
				Text:    gmr.Member.User.Username,
				IconURL: gmr.Member.AvatarURL("256"), // URL –¥–ª—è —ñ–∫–æ–Ω–∫–∏ (–º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º —Ä—è–¥–∫–æ–º)
			},
		}
		_, err = s.ChannelMessageSendEmbed(ChannelLogsServer, embed_join)
		if err != nil {
			fmt.Println("error getting member:", err)
			return
		}
		delete(userTimeJoin, gmr.User.ID)
	})
	sess.AddHandler(func(s *discordgo.Session, gmr *discordgo.GuildBanAdd) { // –ú–æ–¥—É–ª—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –±–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
		cfg, err := ini.Load("servers/" + gmr.GuildID + "/config.ini")
		if err != nil {
			errorMsg := fmt.Sprintf("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É: %v", err)
			writer := color.New(color.FgBlue, color.Bold).SprintFunc()
			fmt.Println(writer(errorMsg))
			return
		}
		section := cfg.Section("LOGS")
		ChannelLogsServer := section.Key("CHANNEL_LOGS_SERVER_ID").String()
		if len(ChannelLogsServer) != 19 {
			return
		}
		currentTime := time.Now()
		stringTime := currentTime.Format("2006-01-02T15:04:05.999Z07:00")

		if err != nil {
			fmt.Println("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É:", err)
			return
		}
		embed_join := &discordgo.MessageEmbed{
			Title: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–≤ –∑–∞–±–∞–Ω–µ–Ω–∏–π",
			Description: fmt.Sprintf(
				">>> **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: **<@%s>\n**–ê–π–¥—ñ: **"+"`%s`"+"\n",
				gmr.User.ID,
				gmr.User.ID,
			),
			Color:     0xeb5079, // –ö–æ–ª—ñ—Ä (—É —Ñ–æ—Ä–º–∞—Ç—ñ HEX)
			Timestamp: stringTime,
			Thumbnail: &discordgo.MessageEmbedThumbnail{
				URL: "https://i.imgur.com/MtFRxOr.png",
			},
		}
		_, err = s.ChannelMessageSendEmbed(ChannelLogsServer, embed_join)
		if err != nil {
			fmt.Println("error getting member:", err)
			return
		}
	})
	sess.Identify.Intents = discordgo.IntentsAllWithoutPrivileged | discordgo.IntentGuildMembers // –î–æ–ø. –¥–æ–∑–≤–æ–ª–∏

	err = sess.Open()
	if err != nil {
		log.Fatal(err)
	}
	defer sess.Close()

	fmt.Println("The bot is online!")

	sc := make(chan os.Signal, 1) // –í–∏–º–∫–Ω–µ–Ω–Ω—è –±–æ—Ç–∞ CTRL+C
	signal.Notify(sc, syscall.SIGINT, syscall.SIGTERM, os.Interrupt)
	<-sc
}
