package main

import (
	"database/sql"
	"fmt"

	"github.com/bwmarrin/discordgo"
)

var ChannelsID []string

func registerCommands(sess *discordgo.Session) {

	selectMenu := discordgo.ApplicationCommand{
		Name:        "settings",
		Description: "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö",
		Type:        discordgo.ChatApplicationCommand,
	}
	_, err := sess.ApplicationCommandCreate("1160175895475138611", "", &selectMenu) // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ !
	if err != nil {
		Error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –ø—Ä–æ–≥—Ä–∞–º–∏", err)
		return
	}
}
func Commands(s *discordgo.Session, ic *discordgo.InteractionCreate, database *sql.DB) {
	if ic.Type == discordgo.InteractionApplicationCommand {
		switch ic.ApplicationCommandData().Name {
		case "settings":
			embed := &discordgo.MessageEmbed{
				Title:       "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –±–æ—Ç–∞",
				Description: "> –í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏",
				Thumbnail: &discordgo.MessageEmbedThumbnail{
					URL: "https://i.imgur.com/o7wcuxw.png",
				},
				Color: 0x6892c2,
				Footer: &discordgo.MessageEmbedFooter{
					Text:    "Kazaki",
					IconURL: "https://i.imgur.com/04X5nxH.png",
				},
			}

			response := &discordgo.InteractionResponse{
				Type: discordgo.InteractionResponseChannelMessageWithSource,
				Data: &discordgo.InteractionResponseData{
					Embeds: []*discordgo.MessageEmbed{embed},
					Flags:  discordgo.MessageFlagsEphemeral,
					Components: []discordgo.MessageComponent{
						discordgo.ActionsRow{
							Components: []discordgo.MessageComponent{
								discordgo.SelectMenu{
									// Select menu, as other components, must have a customID, so we set it to this value.
									CustomID:    "select",
									Placeholder: "–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è üëá",
									Options: []discordgo.SelectMenuOption{
										{
											Label: "–õ–æ–≥—É–≤–∞–Ω–Ω—è",
											// As with components, this things must have their own unique "id" to identify which is which.
											// In this case such id is Value field.
											Value: "logyvanie",
											Emoji: discordgo.ComponentEmoji{
												Name: "üìù",
											},
											// You can also make it a default option, but in this case we won't.
											Default:     false,
											Description: "–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –≤—Ö–æ–¥—É/–≤–∏—Ö–æ–¥—É —ñ —Ç–¥...",
										},
										{
											Label: "–ú–æ–≤–∞/Language",
											Value: "Language_Insert",
											Emoji: discordgo.ComponentEmoji{
												Name: "üó£Ô∏è",
											},
											Description: "–ó–º—ñ–Ω–∞ –º–æ–≤–∏/Language change",
										},
									},
								},
							},
						},
						/*discordgo.Button{
							Label:    "UA",
							Style:    discordgo.SuccessButton,
							Disabled: false,
							CustomID: "Language_UA",
							Emoji: discordgo.ComponentEmoji{
								Name: "üá∫üá¶",
							},
						},
						discordgo.Button{
							Label:    "EU",
							Style:    discordgo.SuccessButton,
							Disabled: false,
							CustomID: "Language_EU",
							Emoji: discordgo.ComponentEmoji{
								Name: "üá™üá∫",
							},
						},*/
					},
				},
			}
			err := s.InteractionRespond(ic.Interaction, response)
			if err != nil {
				Error("", err)
			}
		}
		return
	} else if ic.Type == discordgo.InteractionMessageComponent {
		switch ic.MessageComponentData().CustomID {
		case "select":
			selectedValue := ic.MessageComponentData().Values[0]
			embed := &discordgo.MessageEmbed{
				Title:       "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä—É",
				Description: ">>> –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª–∏ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è. –í—ñ–¥ `–æ–¥–Ω–æ–≥–æ` –¥–æ `—Ç—Ä—å–æ—Ö`. –£ –±—É–¥—å —è–∫–∏–π –º–æ–º–µ–Ω—Ç —ó—Ö –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏. ",
				Thumbnail: &discordgo.MessageEmbedThumbnail{
					URL: "https://i.imgur.com/BKYSMoP.png",
				},
				Color: 0x6892c2,
				Footer: &discordgo.MessageEmbedFooter{
					Text:    "Kazaki",
					IconURL: "https://i.imgur.com/04X5nxH.png",
				},
				Fields: []*discordgo.MessageEmbedField{
					{
						Name:  "–í–∏–±—ñ—Ä –ø–µ—Ä—à–æ–≥–æ –∫–∞–Ω–∞–ª—É",
						Value: "*–ü–µ—Ä—à–∏–π –∫–∞–Ω–∞–ª –≤–∏–≤–æ–¥–∏—Ç—å –≤–∞–º `–∑–º—ñ–Ω—É/–≤–∏–¥–∞–ª–µ–Ω–Ω—è` –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.*",
					},
					{
						Name:  "–í–∏–±—ñ—Ä –¥—Ä—É–≥–æ–≥–æ –∫–∞–Ω–∞–ª—É",
						Value: "*–î—Ä—É–≥–∏–π –∫–∞–Ω–∞–ª –≤–∏–≤–æ–¥–∏—Ç—å –≤–∞–º `–≤—Ö—ñ–¥/–ø–µ—Ä–µ—Ö—ñ–¥/–≤–∏—Ö—ñ–¥` –∑ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.*",
					},
					{
						Name:  "–í–∏–±—ñ—Ä —Ç—Ä–µ—Ç—å–æ–≥–æ –∫–∞–Ω–∞–ª—É",
						Value: "*–¢—Ä–µ—Ç—ñ–π –∫–∞–Ω–∞–ª –≤–∏–≤–æ–¥–∏—Ç—å `–≤—Ö—ñ–¥/–≤–∏—Ö—ñ–¥/–±–∞–Ω` –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.*",
					},
					{
						Name:  "–í–∏–±—ñ—Ä –∫–∞–Ω–∞–ª—É",
						Value: "***–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ, —â–æ–± –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–≤–æ–¥–∏–ª–æ—Å—å –≤ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª, –ø—Ä–æ—Å—Ç–æ –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–π –∫–∞–Ω–∞–ª, —è–∫–∏–π –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω!***",
					},
				},
			}
			switch selectedValue {
			case "logyvanie":
				minValues := 1
				response := &discordgo.InteractionResponse{
					Type: discordgo.InteractionResponseChannelMessageWithSource,
					Data: &discordgo.InteractionResponseData{
						Embeds: []*discordgo.MessageEmbed{embed},
						Flags:  discordgo.MessageFlagsEphemeral,
						Components: []discordgo.MessageComponent{
							discordgo.ActionsRow{
								Components: []discordgo.MessageComponent{
									discordgo.SelectMenu{
										MinValues:    &minValues,
										MaxValues:    3,
										MenuType:     discordgo.ChannelSelectMenu,
										CustomID:     "channel_select",
										Placeholder:  "–¢—É—Ç–∞ —Ç—Ä–µ–±–∞ —Ç–∏—Ü—å–Ω—É—Ç–∏",
										ChannelTypes: []discordgo.ChannelType{discordgo.ChannelTypeGuildText},
									},
								},
							},
						},
					},
				}
				err := s.InteractionRespond(ic.Interaction, response)
				if err != nil {
					Error("", err)
				}

				return
			case "Language_Insert":
				response := &discordgo.InteractionResponse{
					Type: discordgo.InteractionResponseChannelMessageWithSource,
					Data: &discordgo.InteractionResponseData{
						Flags:   discordgo.MessageFlagsEphemeral,
						Content: ">>> *–Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É , –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É\nIf you want to change the language, press the button!*",
						Components: []discordgo.MessageComponent{
							discordgo.ActionsRow{
								Components: []discordgo.MessageComponent{
									discordgo.Button{
										Label:    "UA",
										Style:    discordgo.SuccessButton,
										Disabled: false,
										CustomID: "Language_UA",
										Emoji: discordgo.ComponentEmoji{
											Name: "üá∫üá¶",
										},
									},
									discordgo.Button{
										Label:    "EU",
										Style:    discordgo.SuccessButton,
										Disabled: false,
										CustomID: "Language_EU",
										Emoji: discordgo.ComponentEmoji{
											Name: "üá™üá∫",
										},
									},
								},
							},
						},
					},
				}
				err := s.InteractionRespond(ic.Interaction, response)
				if err != nil {
					Error("", err)
				}

				return
			}
		case "Language_EU":
			println("English")
			return
		case "Language_UA":
			println("Ukraine")
			return
		case "channel_select":
			ChannelsID = ic.MessageComponentData().Values
			switch len(ChannelsID) {
			case 1:
				response := &discordgo.InteractionResponse{
					Type: discordgo.InteractionResponseChannelMessageWithSource,
					Data: &discordgo.InteractionResponseData{
						Flags:   discordgo.MessageFlagsEphemeral,
						Content: ">>> *–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—Å—ñ –ª–æ–≥–∏ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç–∏ –¥–æ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É `–£—Å—ñ –ª–æ–≥–∏`. –Ø–∫—â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ –∞–±–æ –ø–æ–¥—ñ–π, –≤–∏–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –æ–ø—Ü—ñ—é.*",
						Components: []discordgo.MessageComponent{
							discordgo.ActionsRow{
								Components: []discordgo.MessageComponent{
									discordgo.Button{
										Label:    "–£—Å—ñ –ª–æ–≥–∏",
										Style:    discordgo.SuccessButton,
										Disabled: false,
										CustomID: "fd_yes",
										Emoji: discordgo.ComponentEmoji{
											Name: "‚úîÔ∏è",
										},
									},
									discordgo.Button{
										Label:    "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
										Style:    discordgo.SecondaryButton,
										Disabled: false,
										CustomID: "fd_message",
										Emoji: discordgo.ComponentEmoji{
											Name: "üí¨",
										},
									},
									discordgo.Button{
										Label:    "–ì–æ–ª–æ—Å–æ–≤—ñ –∫–∞–Ω–∞–ª–∏",
										Style:    discordgo.SecondaryButton,
										Disabled: false,
										CustomID: "fd_voice",
										Emoji: discordgo.ComponentEmoji{
											Name: "üéôÔ∏è",
										},
									},
									discordgo.Button{
										Label:    "–ü–æ–¥—ñ—ó",
										Style:    discordgo.SecondaryButton,
										Disabled: false,
										CustomID: "fd_event",
										Emoji: discordgo.ComponentEmoji{
											Name: "üì¢",
										},
									},
								},
							},
						},
					},
				}
				err := s.InteractionRespond(ic.Interaction, response)
				if err != nil {
					Error("", err)
				}

				return
			case 2:
				embed := &discordgo.MessageEmbed{
					Title:       "–ù–µ–∑—Ä–æ–∑—É–º—ñ–ª–æ",
					Color:       0xffa100,
					Description: "> –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ",
					Image: &discordgo.MessageEmbedImage{
						URL: "https://i.imgur.com/gYaQOEj.jpg",
					},
					Footer: &discordgo.MessageEmbedFooter{
						Text:    "Kazaki",
						IconURL: "https://i.imgur.com/04X5nxH.png",
					},
				}
				response := &discordgo.InteractionResponse{
					Type: discordgo.InteractionResponseChannelMessageWithSource,
					Data: &discordgo.InteractionResponseData{
						Flags:  discordgo.MessageFlagsEphemeral,
						Embeds: []*discordgo.MessageEmbed{embed},
					},
				}
				err := s.InteractionRespond(ic.Interaction, response)
				if err != nil {
					Error("", err)
				}

				return
			case 3:
				embed := &discordgo.MessageEmbed{
					Title:       "–£—Å–ø—ñ—à–Ω–æ",
					Color:       0x0ea901,
					Description: "> –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –≤—Å—å–æ–≥–æ —Å–µ—Ä–≤–µ—Ä—É",
					Footer: &discordgo.MessageEmbedFooter{
						Text:    "Kazaki",
						IconURL: "https://i.imgur.com/04X5nxH.png",
					},
				}
				response := &discordgo.InteractionResponse{
					Type: discordgo.InteractionResponseChannelMessageWithSource,
					Data: &discordgo.InteractionResponseData{
						Flags:  discordgo.MessageFlagsEphemeral,
						Embeds: []*discordgo.MessageEmbed{embed},
					},
				}
				err := s.InteractionRespond(ic.Interaction, response)
				if err != nil {
					Error("", err)
				}

				// –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
				query := fmt.Sprintf(`UPDATE %s SET channel_log_msgID = ?, channel_log_voiceID = ?, channel_log_serverID = ? WHERE id = ?`, shortenNumber(ic.GuildID))

				// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
				statement, err := database.Prepare(query)
				if err != nil {
					fmt.Println("Error preparing statement:", err)
					return
				}
				defer statement.Close()

				// –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
				_, err = statement.Exec(ChannelsID[0], ChannelsID[1], ChannelsID[2], ic.GuildID)
				if err != nil {
					fmt.Println("Error executing query:", err)
				}

				return
			}
		case "fd_yes":
			embed := &discordgo.MessageEmbed{
				Title:       "–£—Å–ø—ñ—à–Ω–æ",
				Color:       0x0ea901,
				Description: "> –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –≤—Å—å–æ–≥–æ —Å–µ—Ä–≤–µ—Ä—É –ª–∏—à–µ –≤ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª",
				Footer: &discordgo.MessageEmbedFooter{
					Text:    "Kazaki",
					IconURL: "https://i.imgur.com/04X5nxH.png",
				},
			}
			response := &discordgo.InteractionResponse{
				Type: discordgo.InteractionResponseChannelMessageWithSource,
				Data: &discordgo.InteractionResponseData{
					Flags:  discordgo.MessageFlagsEphemeral,
					Embeds: []*discordgo.MessageEmbed{embed},
				},
			}
			err := s.InteractionRespond(ic.Interaction, response)
			if err != nil {
				Error("", err)
			}

			// –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
			query := fmt.Sprintf(`UPDATE %s SET channel_log_msgID = ?, channel_log_voiceID = ?, channel_log_serverID = ? WHERE id = ?`, shortenNumber(ic.GuildID))

			// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
			statement, err := database.Prepare(query)
			if err != nil {
				fmt.Println("Error preparing statement:", err)
				return
			}
			defer statement.Close()

			// –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
			_, err = statement.Exec(ChannelsID[0], ChannelsID[0], ChannelsID[0], ic.GuildID)
			if err != nil {
				fmt.Println("Error executing query:", err)
			}
			return
		case "fd_message":

			embed := &discordgo.MessageEmbed{
				Title:       "–£—Å–ø—ñ—à–Ω–æ",
				Color:       0x0ea901,
				Description: "> –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å —Ç—ñ–ª—å–∫–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å",
				Footer: &discordgo.MessageEmbedFooter{
					Text:    "Kazaki",
					IconURL: "https://i.imgur.com/04X5nxH.png",
				},
			}
			response := &discordgo.InteractionResponse{
				Type: discordgo.InteractionResponseChannelMessageWithSource,
				Data: &discordgo.InteractionResponseData{
					Flags:  discordgo.MessageFlagsEphemeral,
					Embeds: []*discordgo.MessageEmbed{embed},
				},
			}
			err := s.InteractionRespond(ic.Interaction, response)
			if err != nil {
				Error("", err)
			}

			query := fmt.Sprintf(`UPDATE %s SET channel_log_msgID = ?, channel_log_voiceID = ?, channel_log_serverID = ? WHERE id = ?`, shortenNumber(ic.GuildID))

			// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
			statement, err := database.Prepare(query)
			if err != nil {
				fmt.Println("Error preparing statement:", err)
				return
			}
			defer statement.Close()

			// –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
			_, err = statement.Exec(ChannelsID[0], "0", "0", ic.GuildID)
			if err != nil {
				fmt.Println("Error executing query:", err)
			}
			return
		case "fd_voice":

			embed := &discordgo.MessageEmbed{
				Title:       "–£—Å–ø—ñ—à–Ω–æ",
				Color:       0x0ea901,
				Description: "> –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å —Ç—ñ–ª—å–∫–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤",
				Footer: &discordgo.MessageEmbedFooter{
					Text:    "Kazaki",
					IconURL: "https://i.imgur.com/04X5nxH.png",
				},
			}
			response := &discordgo.InteractionResponse{
				Type: discordgo.InteractionResponseChannelMessageWithSource,
				Data: &discordgo.InteractionResponseData{
					Flags:  discordgo.MessageFlagsEphemeral,
					Embeds: []*discordgo.MessageEmbed{embed},
				},
			}
			err := s.InteractionRespond(ic.Interaction, response)
			if err != nil {
				Error("", err)
			}

			query := fmt.Sprintf(`UPDATE %s SET channel_log_msgID = ?, channel_log_voiceID = ?, channel_log_serverID = ? WHERE id = ?`, shortenNumber(ic.GuildID))

			// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
			statement, err := database.Prepare(query)
			if err != nil {
				fmt.Println("Error preparing statement:", err)
				return
			}
			defer statement.Close()

			// –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
			_, err = statement.Exec("0", ChannelsID[0], "0", ic.GuildID)
			if err != nil {
				fmt.Println("Error executing query:", err)
			}
			return
		case "fd_event":
			query := fmt.Sprintf(`UPDATE %s SET channel_log_msgID = ?, channel_log_voiceID = ?, channel_log_serverID = ? WHERE id = ?`, shortenNumber(ic.GuildID))

			// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
			statement, err := database.Prepare(query)
			if err != nil {
				fmt.Println("Error preparing statement:", err)
				return
			}
			defer statement.Close()

			// –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
			_, err = statement.Exec("0", "0", ChannelsID[0], ic.GuildID)
			if err != nil {
				fmt.Println("Error executing query:", err)
			}
			return
		}
	}
}
