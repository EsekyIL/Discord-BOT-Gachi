package main

import (
	"database/sql"

	"github.com/bwmarrin/discordgo"
)

func registerCommands(sess *discordgo.Session, database *sql.DB) {

	selectMenu := discordgo.ApplicationCommand{
		Name:        "settings",
		Description: "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö",
		Type:        discordgo.ChatApplicationCommand,
	}
	_, err := sess.ApplicationCommandCreate("1160175895475138611", "", &selectMenu) // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ !
	if err != nil {
		Error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –ø—Ä–æ–≥—Ä–∞–º–∏", err)
		return
	}
	sess.AddHandler(func(s *discordgo.Session, ic *discordgo.InteractionCreate) { // –ú–æ–¥—É–ª—å –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤ —Ñ–∞–π–ª
		var response *discordgo.InteractionResponse

		OneValue := ""
		TwoValue := ""
		ThreeValue := ""
		//	case ic.ApplicationCommandData().Name == "temp":  –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥
		//		idcmd := ic.ApplicationCommandData().ID
		//		s.ApplicationCommandDelete("1160175895475138611", "", idcmd)
		embed1 := &discordgo.MessageEmbed{
			Title:       "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –±–æ—Ç–∞",
			Description: "> –í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏",
			Thumbnail: &discordgo.MessageEmbedThumbnail{
				URL: "https://i.imgur.com/o7wcuxw.png",
			},
			Color: 0x6892c2,
			Footer: &discordgo.MessageEmbedFooter{
				Text:    "Kazaki",
				IconURL: "https://i.imgur.com/04X5nxH.png",
			},
		}
		switch ic.Type {
		case discordgo.InteractionApplicationCommand:
			switch ic.ApplicationCommandData().Name {
			case "settings":
				response = &discordgo.InteractionResponse{
					Type: discordgo.InteractionResponseChannelMessageWithSource,
					Data: &discordgo.InteractionResponseData{
						Embeds: []*discordgo.MessageEmbed{embed1},
						Flags:  discordgo.MessageFlagsEphemeral,
						Components: []discordgo.MessageComponent{
							discordgo.ActionsRow{
								Components: []discordgo.MessageComponent{
									discordgo.SelectMenu{
										// Select menu, as other components, must have a customID, so we set it to this value.
										CustomID:    "select",
										Placeholder: "–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è üëá",
										Options: []discordgo.SelectMenuOption{
											{
												Label: "–õ–æ–≥—É–≤–∞–Ω–Ω—è",
												// As with components, this things must have their own unique "id" to identify which is which.
												// In this case such id is Value field.
												Value: "logyvanie",
												Emoji: discordgo.ComponentEmoji{
													Name: "üìù",
												},
												// You can also make it a default option, but in this case we won't.
												Default:     false,
												Description: "–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –≤—Ö–æ–¥—É/–≤–∏—Ö–æ–¥—É —ñ —Ç–¥...",
											},
											{
												Label: "–í–∏–¥–∞—á–∞ —Ä–æ–ª—ñ –ø–æ Emoji",
												Value: "js",
												Emoji: discordgo.ComponentEmoji{
													Name: "üé®",
												},
												Description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≤–∏–¥–∞—á–∞ —Ä–æ–ª—ñ",
											},
											{
												Label: "Python",
												Value: "py",
												Emoji: discordgo.ComponentEmoji{
													Name: "üêç",
												},
												Description: "Python programming language",
											},
										},
									},
								},
							},
						},
					},
				}
				err := s.InteractionRespond(ic.Interaction, response)
				if err != nil {
					Error("", err)
				}
			}
		case discordgo.InteractionMessageComponent:
			minValues := 1
			if ic.MessageComponentData().CustomID == "select" {
				// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –ø—É–Ω–∫—Ç—É —Å–ø–∏—Å–∫—É
				selectedValue := ic.MessageComponentData().Values[0]
				embed_logs := &discordgo.MessageEmbed{
					Title:       "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä—É",
					Description: ">>> –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª–∏ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è. –í—ñ–¥ `–æ–¥–Ω–æ–≥–æ` –¥–æ `—Ç—Ä—å–æ—Ö`. –£ –±—É–¥—å —è–∫–∏–π –º–æ–º–µ–Ω—Ç —ó—Ö –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏. ",
					Thumbnail: &discordgo.MessageEmbedThumbnail{
						URL: "https://i.imgur.com/BKYSMoP.png",
					},
					Color: 0x6892c2,
					Footer: &discordgo.MessageEmbedFooter{
						Text:    "Kazaki",
						IconURL: "https://i.imgur.com/04X5nxH.png",
					},
					Fields: []*discordgo.MessageEmbedField{
						{
							Name:  "–í–∏–±—ñ—Ä –ø–µ—Ä—à–æ–≥–æ –∫–∞–Ω–∞–ª—É",
							Value: "*–ü–µ—Ä—à–∏–π –∫–∞–Ω–∞–ª –≤–∏–≤–æ–¥–∏—Ç—å –≤–∞–º `–∑–º—ñ–Ω—É/–≤–∏–¥–∞–ª–µ–Ω–Ω—è` –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.*",
						},
						{
							Name:  "–í–∏–±—ñ—Ä –¥—Ä—É–≥–æ–≥–æ –∫–∞–Ω–∞–ª—É",
							Value: "*–î—Ä—É–≥–∏–π –∫–∞–Ω–∞–ª –≤–∏–≤–æ–¥–∏—Ç—å –≤–∞–º `–≤—Ö—ñ–¥/–ø–µ—Ä–µ—Ö—ñ–¥/–≤–∏—Ö—ñ–¥` –∑ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.*",
						},
						{
							Name:  "–í–∏–±—ñ—Ä —Ç—Ä–µ—Ç—å–æ–≥–æ –∫–∞–Ω–∞–ª—É",
							Value: "*–¢—Ä–µ—Ç—ñ–π –∫–∞–Ω–∞–ª –≤–∏–≤–æ–¥–∏—Ç—å `–≤—Ö—ñ–¥/–≤–∏—Ö—ñ–¥/–±–∞–Ω` –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.*",
						},
						{
							Name:  "–í–∏–±—ñ—Ä –∫–∞–Ω–∞–ª—É",
							Value: "***–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ, —â–æ–± –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–≤–æ–¥–∏–ª–æ—Å—å –≤ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª, –ø—Ä–æ—Å—Ç–æ –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–π –∫–∞–Ω–∞–ª, —è–∫–∏–π –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω!***",
						},
					},
				}
				// –û–±—Ä–æ–±–∫–∞ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
				switch selectedValue {
				case "logyvanie":
					response = &discordgo.InteractionResponse{
						Type: discordgo.InteractionResponseChannelMessageWithSource,
						Data: &discordgo.InteractionResponseData{
							Embeds: []*discordgo.MessageEmbed{embed_logs},
							Flags:  discordgo.MessageFlagsEphemeral,
							Components: []discordgo.MessageComponent{
								discordgo.ActionsRow{
									Components: []discordgo.MessageComponent{
										discordgo.SelectMenu{
											MinValues:    &minValues,
											MaxValues:    3,
											MenuType:     discordgo.ChannelSelectMenu,
											CustomID:     "channel_select",
											Placeholder:  "–¢—É—Ç–∞ —Ç—Ä–µ–±–∞ —Ç–∏—Ü—å–Ω—É—Ç–∏",
											ChannelTypes: []discordgo.ChannelType{discordgo.ChannelTypeGuildText},
										},
									},
								},
							},
						},
					}
					err := s.InteractionRespond(ic.Interaction, response)
					if err != nil {
						Error("", err)
					}
				case "fd_yes":
					println("–í—Å—ñ –ª–æ–≥—ñ –±–ª—è—Ö–∞ –º—É—Ö–∞")
				case "py":
					println("Py its easy")
				}
			}
			if ic.MessageComponentData().CustomID == "channel_select" {
				// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –ø—É–Ω–∫—Ç—É —Å–ø–∏—Å–∫—É
				var Alone bool = false
				var Two bool = false
				var Three bool = false
				switch len(ic.MessageComponentData().Values) {
				case 1:
					OneValue = ic.MessageComponentData().Values[0]
					Alone = true
				case 2:
					OneValue = ic.MessageComponentData().Values[0]
					TwoValue = ic.MessageComponentData().Values[1]
					Two = true
				case 3:
					OneValue = ic.MessageComponentData().Values[0]
					TwoValue = ic.MessageComponentData().Values[1]
					ThreeValue = ic.MessageComponentData().Values[2]
					Three = true
				default:
					TwoValue = OneValue
					ThreeValue = OneValue
				}
				if Alone {
					response = &discordgo.InteractionResponse{
						Type: discordgo.InteractionResponseChannelMessageWithSource,
						Data: &discordgo.InteractionResponseData{
							Flags:   discordgo.MessageFlagsEphemeral,
							Content: ">>> *–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—Å—ñ –ª–æ–≥–∏ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç–∏ –¥–æ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É `–£—Å—ñ –ª–æ–≥–∏`. –Ø–∫—â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ –∞–±–æ –ø–æ–¥—ñ–π, –≤–∏–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –æ–ø—Ü—ñ—é.*",
							Components: []discordgo.MessageComponent{
								discordgo.ActionsRow{
									Components: []discordgo.MessageComponent{
										discordgo.Button{
											Label:    "–£—Å—ñ –ª–æ–≥–∏",
											Style:    discordgo.SuccessButton,
											Disabled: false,
											CustomID: "fd_yes",
											Emoji: discordgo.ComponentEmoji{
												Name: "‚úîÔ∏è",
											},
										},
										discordgo.Button{
											Label:    "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
											Style:    discordgo.SecondaryButton,
											Disabled: false,
											CustomID: "fd_message",
											Emoji: discordgo.ComponentEmoji{
												Name: "üí¨",
											},
										},
										discordgo.Button{
											Label:    "–ì–æ–ª–æ—Å–æ–≤—ñ –∫–∞–Ω–∞–ª–∏",
											Style:    discordgo.SecondaryButton,
											Disabled: false,
											CustomID: "fd_voice",
											Emoji: discordgo.ComponentEmoji{
												Name: "üéôÔ∏è",
											},
										},
										discordgo.Button{
											Label:    "–ü–æ–¥—ñ—ó",
											Style:    discordgo.SecondaryButton,
											Disabled: false,
											CustomID: "fd_event",
											Emoji: discordgo.ComponentEmoji{
												Name: "üì¢",
											},
										},
									},
								},
							},
						},
					}
					err := s.InteractionRespond(ic.Interaction, response)
					if err != nil {
						Error("", err)
					}
				}

				if Two {
					embed_three := &discordgo.MessageEmbed{
						Title:       "–ù–µ–∑—Ä–æ–∑—É–º—ñ–ª–æ",
						Color:       0xffa100,
						Description: "> –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ",
						Image: &discordgo.MessageEmbedImage{
							URL: "https://i.imgur.com/gYaQOEj.jpg",
						},
						Footer: &discordgo.MessageEmbedFooter{
							Text:    "Kazaki",
							IconURL: "https://i.imgur.com/04X5nxH.png",
						},
					}
					response = &discordgo.InteractionResponse{
						Type: discordgo.InteractionResponseChannelMessageWithSource,
						Data: &discordgo.InteractionResponseData{
							Flags:  discordgo.MessageFlagsEphemeral,
							Embeds: []*discordgo.MessageEmbed{embed_three},
						},
					}
					err = s.InteractionRespond(ic.Interaction, response)
					if err != nil {
						Error("", err)
					}
				}

				if Three {
					statement, _ := database.Prepare("UPDATE servers SET channel_log_msgID = ?, channel_log_voiceID = ?, channel_log_serverID = ? WHERE id = ?")
					statement.Exec(OneValue, TwoValue, ThreeValue, ic.GuildID)
					defer statement.Close()

					embed_three := &discordgo.MessageEmbed{
						Title:       "–£—Å–ø—ñ—à–Ω–æ",
						Color:       0x0ea901,
						Description: "> –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –≤—Å—å–æ–≥–æ —Å–µ—Ä–≤–µ—Ä—É",
						Footer: &discordgo.MessageEmbedFooter{
							Text:    "Kazaki",
							IconURL: "https://i.imgur.com/04X5nxH.png",
						},
					}
					response = &discordgo.InteractionResponse{
						Type: discordgo.InteractionResponseChannelMessageWithSource,
						Data: &discordgo.InteractionResponseData{
							Flags:  discordgo.MessageFlagsEphemeral,
							Embeds: []*discordgo.MessageEmbed{embed_three},
						},
					}
					err = s.InteractionRespond(ic.Interaction, response)
					if err != nil {
						Error("", err)
					}
				}

			}
			if ic.MessageComponentData().CustomID == "fd_yes" {
				statement, _ := database.Prepare("UPDATE servers SET channel_log_msgID = ?, channel_log_voiceID = ?, channel_log_serverID = ? WHERE id = ?")
				statement.Exec(OneValue, OneValue, OneValue, ic.GuildID)
				defer statement.Close()

				embed_AllOne := &discordgo.MessageEmbed{
					Title:       "–£—Å–ø—ñ—à–Ω–æ",
					Color:       0x0ea901,
					Description: "> –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –≤—Å—å–æ–≥–æ —Å–µ—Ä–≤–µ—Ä—É –ª–∏—à–µ –≤ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª",
					Footer: &discordgo.MessageEmbedFooter{
						Text:    "Kazaki",
						IconURL: "https://i.imgur.com/04X5nxH.png",
					},
				}
				response = &discordgo.InteractionResponse{
					Type: discordgo.InteractionResponseChannelMessageWithSource,
					Data: &discordgo.InteractionResponseData{
						Flags:  discordgo.MessageFlagsEphemeral,
						Embeds: []*discordgo.MessageEmbed{embed_AllOne},
					},
				}
				err = s.InteractionRespond(ic.Interaction, response)
				if err != nil {
					Error("", err)
				}
			}
			if ic.MessageComponentData().CustomID == "fd_message" {
				statement, _ := database.Prepare("UPDATE servers SET channel_log_msgID = ? WHERE id = ?")
				statement.Exec(OneValue, ic.GuildID)
				defer statement.Close()

				embed_AllOne := &discordgo.MessageEmbed{
					Title:       "–£—Å–ø—ñ—à–Ω–æ",
					Color:       0x0ea901,
					Description: "> –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å —Ç—ñ–ª—å–∫–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å",
					Footer: &discordgo.MessageEmbedFooter{
						Text:    "Kazaki",
						IconURL: "https://i.imgur.com/04X5nxH.png",
					},
				}
				response = &discordgo.InteractionResponse{
					Type: discordgo.InteractionResponseChannelMessageWithSource,
					Data: &discordgo.InteractionResponseData{
						Flags:  discordgo.MessageFlagsEphemeral,
						Embeds: []*discordgo.MessageEmbed{embed_AllOne},
					},
				}
				err = s.InteractionRespond(ic.Interaction, response)
				if err != nil {
					Error("", err)
				}
			}
			if ic.MessageComponentData().CustomID == "fd_voice" {
				statement, _ := database.Prepare("UPDATE servers SET channel_log_voiceID = ? WHERE id = ?")
				statement.Exec(OneValue, ic.GuildID)
				defer statement.Close()

				embed_AllOne := &discordgo.MessageEmbed{
					Title:       "–£—Å–ø—ñ—à–Ω–æ",
					Color:       0x0ea901,
					Description: "> –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å —Ç—ñ–ª—å–∫–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤",
					Footer: &discordgo.MessageEmbedFooter{
						Text:    "Kazaki",
						IconURL: "https://i.imgur.com/04X5nxH.png",
					},
				}
				response = &discordgo.InteractionResponse{
					Type: discordgo.InteractionResponseChannelMessageWithSource,
					Data: &discordgo.InteractionResponseData{
						Flags:  discordgo.MessageFlagsEphemeral,
						Embeds: []*discordgo.MessageEmbed{embed_AllOne},
					},
				}
				err = s.InteractionRespond(ic.Interaction, response)
				if err != nil {
					Error("", err)
				}
			}
			if ic.MessageComponentData().CustomID == "fd_event" {
				statement, _ := database.Prepare("UPDATE servers SET channel_log_serverID = ? WHERE id = ?")
				statement.Exec(OneValue, ic.GuildID)
				defer statement.Close()

			}
			embed_AllOne := &discordgo.MessageEmbed{
				Title:       "–£—Å–ø—ñ—à–Ω–æ",
				Color:       0x0ea901,
				Description: "> –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å —Ç—ñ–ª—å–∫–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –≤—Ö–æ–¥—É/–≤–∏—Ö–æ–¥—É/–±–∞–Ω—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
				Footer: &discordgo.MessageEmbedFooter{
					Text:    "Kazaki",
					IconURL: "https://i.imgur.com/04X5nxH.png",
				},
			}
			response = &discordgo.InteractionResponse{
				Type: discordgo.InteractionResponseChannelMessageWithSource,
				Data: &discordgo.InteractionResponseData{
					Flags:  discordgo.MessageFlagsEphemeral,
					Embeds: []*discordgo.MessageEmbed{embed_AllOne},
				},
			}
			err = s.InteractionRespond(ic.Interaction, response)
			if err != nil {
				Error("", err)
			}
		}
	})
}
